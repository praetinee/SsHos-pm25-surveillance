import streamlit as st
import pandas as pd
from data_loader import load_patient_data, load_pm25_data
from plots_main import (
    plot_patient_vs_pm25,
    plot_yearly_comparison,
    # plot_calendar_heatmap, # REMOVED
)
from plots_correlation import plot_correlation_scatter
from plots_vulnerable import plot_vulnerable_dashboard
# from geocoder import add_coordinates_to_dataframe # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

# ----------------------------
# üîß CONFIG: Google Sheets URL
# ----------------------------
URL_PATIENT = (
    "https://docs.google.com/spreadsheets/d/1vvQ8YLChHXvCowQQzcKIeV4PWt0CCt76f5Sj3fNTOV0/export?format=csv&gid=795124395"
)
URL_PM25 = (
    "https://docs.google.com/spreadsheets/d/1vvQ8YLChHXvCowQQzcKIeV4PWt0CCt76f5Sj3fNTOV0/export?format=csv&gid=1038807599"
)

st.set_page_config(page_title="PM2.5 Surveillance Dashboard", layout="wide")

# --- Load Data ---
df_pat = load_patient_data(URL_PATIENT)
df_pm = load_pm25_data(URL_PM25)

if df_pat.empty:
    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
    st.stop()
else:
    # --- Data Transformation Logic ---
    # Define conditions for the new category
    condition1 = df_pat["4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"] == "‡πÑ‡∏°‡πà‡∏à‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ"
    condition2 = df_pat["Y96, Y97, Z58.1"] == "Z58.1"
    
    # Apply the new category where both conditions are met
    df_pat.loc[condition1 & condition2, "4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"] = "‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ‡∏£‡πà‡∏ß‡∏°‡∏î‡πâ‡∏ß‡∏¢ Z58.1"
    st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# --- Geocoding (Temporarily Disabled) ---
# df_pat = add_coordinates_to_dataframe(df_pat)

# ----------------------------
# üéõ Sidebar Filter
# ----------------------------
st.sidebar.header("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

if "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" in df_pat.columns and "4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á" in df_pat.columns:
    months = sorted(df_pat["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].dropna().unique().tolist())
    gp_list = sorted(df_pat["4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"].dropna().unique().tolist())

    month_sel = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + months)
    gp_sel = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + gp_list)

    dff = df_pat.copy()
    if month_sel != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        dff = dff[dff["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] == month_sel]
    if gp_sel != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        dff = dff[dff["4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"] == gp_sel]
else:
    st.sidebar.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á) ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.stop()

# ----------------------------
# üé® Main Panel
# ----------------------------
st.title("Dashboards ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å PM2.5")

# --- Create Tabs for different visualizations ---
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìà Dashboard ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
    "üìÖ ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏¢‡∏õ‡∏µ",
    "üîó ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå",
    "üìä ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á",
    "üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"
])

with tab1:
    st.header("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ PM2.5")
    plot_patient_vs_pm25(dff, df_pm)

with tab2:
    st.header("‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏õ‡∏µ‡∏ï‡πà‡∏≠‡∏õ‡∏µ (Year-over-Year)")
    
    # --- KPI Cards ---
    df_merged_all = pd.merge(df_pat.groupby('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô').size().reset_index(name='count'), df_pm, on='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', how='inner')
    
    if not df_merged_all.empty:
        max_pm_month = df_merged_all.loc[df_merged_all['PM2.5 (ug/m3)'].idxmax()]
        max_patient_month = df_merged_all.loc[df_merged_all['count'].idxmax()]
        avg_pm = df_merged_all['PM2.5 (ug/m3)'].mean()
        avg_patients = df_merged_all['count'].mean()

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{max_pm_month['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']}", f"{max_pm_month['PM2.5 (ug/m3)']:.2f} ¬µg/m¬≥")
        col2.metric("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{max_patient_month['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']}", f"{int(max_patient_month['count'])} ‡∏Ñ‡∏ô")
        col3.metric("‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_pm:.2f} ¬µg/m¬≥")
        col4.metric("‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", f"{int(avg_patients)} ‡∏Ñ‡∏ô")
    
    plot_yearly_comparison(df_pat, df_pm)


with tab3:
    st.header("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏ß‡∏°")
    plot_correlation_scatter(df_pat, df_pm)

with tab4:
    st.header("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á")
    plot_vulnerable_dashboard(df_pat, df_pm, dff)

with tab5:
    st.header("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡∏ö‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
    st.info("‚ÑπÔ∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤ API")

