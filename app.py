import streamlit as st
import pandas as pd
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objs as go
import requests

st.set_page_config(page_title="PM2.5 Surveillance Dashboard", layout="wide")

# ----------------------------
# üîß CONFIG: Google Sheets URL
# ----------------------------
URL_PATIENT = (
    "https://docs.google.com/spreadsheets/d/1vvQ8YLChHXvCowQQzcKIeV4PWt0CCt76f5Sj3fNTOV0/export?format=csv&gid=795124395"
)
URL_PM25 = (
    "https://docs.google.com/spreadsheets/d/1vvQ8YLChHXvCowQQzcKIeV4PWt0CCt76f5Sj3fNTOV0/export?format=csv&gid=1038807599"
)

# ----------------------------
# üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets
# ----------------------------
@st.cache_data(show_spinner="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢...")
def load_patient():
    df = pd.read_csv(URL_PATIENT)
    df.columns = df.columns.str.strip()
    if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" in df.columns:
        df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"], errors="coerce")
        df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"].dt.to_period("M").astype(str)
    return df

@st.cache_data(show_spinner="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5...")
def load_pm25():
    df = pd.read_csv(URL_PM25)
    df.columns = df.columns.str.strip()
    return df

df_pat = load_patient()
df_pm = load_pm25()

st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# ----------------------------
# üåç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô geocoding ‡∏î‡πâ‡∏ß‡∏¢ Google Maps API
# ----------------------------
@st.cache_data(show_spinner="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å Google Maps...")
def geocode_address(address):
    """Return (lat, lon) using Google Maps Geocoding API"""
    if not isinstance(address, str) or address.strip() == "":
        return None, None
    api_key = st.secrets["google_maps"]["api_key"]
    url = f"https://maps.googleapis.com/maps/api/geocode/json"
    params = {"address": address, "key": api_key}
    r = requests.get(url, params=params)
    if r.status_code == 200:
        data = r.json()
        if data.get("status") == "OK":
            loc = data["results"][0]["geometry"]["location"]
            return loc["lat"], loc["lng"]
    return None, None

# ----------------------------
# üß≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≥‡∏ö‡∏•
# ----------------------------
if all(col in df_pat.columns for col in ["‡∏ï‡∏≥‡∏ö‡∏•", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"]):
    st.info("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≥‡∏ö‡∏• ... (‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ cache ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
    df_pat["full_address"] = df_pat.apply(
        lambda r: f"{r['‡∏ï‡∏≥‡∏ö‡∏•']} {r['‡∏≠‡∏≥‡πÄ‡∏†‡∏≠']} {r['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']}", axis=1
    )
    df_pat[["lat", "lon"]] = df_pat["full_address"].apply(
        lambda x: pd.Series(geocode_address(x))
    )
else:
    df_pat["lat"], df_pat["lon"] = None, None

# ----------------------------
# üéõ Sidebar Filter
# ----------------------------
st.sidebar.header("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

months = sorted(df_pat["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].dropna().unique().tolist()) if "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" in df_pat.columns else []
gp_list = sorted(df_pat["4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"].dropna().unique().tolist()) if "4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á" in df_pat.columns else []

month_sel = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + months)
gp_sel = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + gp_list)

dff = df_pat.copy()
if month_sel != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    dff = dff[dff["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] == month_sel]
if gp_sel != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    dff = dff[dff["4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"] == gp_sel]

# ----------------------------
# üìà ‡∏Å‡∏£‡∏≤‡∏ü: ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ 4 ‡∏Å‡∏•‡∏∏‡πà‡∏° vs PM2.5
# ----------------------------
st.subheader("üìä ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ PM2.5")

if "4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á" in df_pat.columns and "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" in df_pat.columns:
    agg = df_pat.groupby(["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"]).size().reset_index(name="count")
    df_merge = agg.merge(df_pm, on="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", how="left")

    fig_comb = make_subplots(specs=[[{"secondary_y": True}]])
    for grp in df_merge["4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"].unique():
        d2 = df_merge[df_merge["4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"] == grp]
        fig_comb.add_trace(
            go.Scatter(x=d2["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"], y=d2["count"], name=f"‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ {grp}", mode="lines+markers"),
            secondary_y=False
        )

    if "PM2.5 (ug/m3)" in df_merge.columns:
        fig_comb.add_trace(
            go.Scatter(x=df_merge["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"], y=df_merge["PM2.5 (ug/m3)"], name="PM2.5 (ug/m3)", line=dict(color="black", dash="dash")),
            secondary_y=True
        )

    fig_comb.update_layout(title_text="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ vs PM2.5", legend_title_text="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    fig_comb.update_yaxes(title_text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", secondary_y=False)
    fig_comb.update_yaxes(title_text="PM2.5 (ug/m3)", secondary_y=True)
    st.plotly_chart(fig_comb, use_container_width=True)
else:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'")

# ----------------------------
# üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡∏ö‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
# ----------------------------
st.subheader("üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡∏ö‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
map_df = dff[["lat", "lon", "full_address"]].dropna() if "lat" in dff.columns else pd.DataFrame()
if not map_df.empty:
    st.map(map_df.rename(columns={"lat": "latitude", "lon": "longitude"}))
else:
    st.info("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≥‡∏ö‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ geocode ‡πÑ‡∏î‡πâ")

# ----------------------------
# üë• ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á
# ----------------------------
st.subheader("üë• ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á")
if "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á" in df_pat.columns:
    sp = df_pat["‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á"].value_counts().reset_index()
    sp.columns = ["‡∏Å‡∏•‡∏∏‡πà‡∏°", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
    pie = px.pie(sp, values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", names="‡∏Å‡∏•‡∏∏‡πà‡∏°", title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á")
    st.plotly_chart(pie, use_container_width=True)
else:
    st.info("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ----------------------------
# üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------
st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á)")
st.dataframe(dff, use_container_width=True)
