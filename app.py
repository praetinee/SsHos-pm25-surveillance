import streamlit as st
import pandas as pd
import plotly.express as px
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter
from plotly.subplots import make_subplots
import plotly.graph_objs as go

st.set_page_config(page_title="PM2.5 Surveillance Dashboard", layout="wide")

# ----------------------------
# üîß CONFIG: Google Sheets URL
# ----------------------------
URL_PATIENT = (
    "https://docs.google.com/spreadsheets/d/1vvQ8YLChHXvCowQQzcKIeV4PWt0CCt76f5Sj3fNTOV0/export?format=csv&gid=795124395"
)
URL_PM25 = (
    "https://docs.google.com/spreadsheets/d/1vvQ8YLChHXvCowQQzcKIeV4PWt0CCt76f5Sj3fNTOV0/export?format=csv&gid=1038807599"
)

# ----------------------------
# üîÅ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------
@st.cache_data
def load_patient():
    df = pd.read_csv(URL_PATIENT)
    df.columns = df.columns.str.strip()
    if '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' in df.columns:
        df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'], errors='coerce')
        df['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].dt.to_period('M').astype(str)
    return df

@st.cache_data
def load_pm25():
    df = pd.read_csv(URL_PM25)
    df.columns = df.columns.str.strip()
    return df

df_pat = load_patient()
df_pm = load_pm25()

# ----------------------------
# ‚úèÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢: geocode ‡∏ä‡∏∑‡πà‡∏≠ ‚Üí lat, lon
# ----------------------------
@st.cache_data
def geocode_address(list_of_names):
    geolocator = Nominatim(user_agent="pm25_dashboard")
    geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)
    records = []
    for name in list_of_names:
        if not isinstance(name, str) or name.strip() == "":
            records.append({'name': name, 'lat': None, 'lon': None})
            continue
        try:
            loc = geocode(name)
            if loc:
                records.append({'name': name, 'lat': loc.latitude, 'lon': loc.longitude})
            else:
                records.append({'name': name, 'lat': None, 'lon': None})
        except Exception:
            records.append({'name': name, 'lat': None, 'lon': None})
    return pd.DataFrame(records)

# ----------------------------
# üß≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≥‡∏ö‡∏•
# ----------------------------
if all(col in df_pat.columns for col in ['‡∏ï‡∏≥‡∏ö‡∏•', '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠', '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']):
    df_pat['loc_name'] = df_pat.apply(lambda row: f"{row['‡∏ï‡∏≥‡∏ö‡∏•']} {row['‡∏≠‡∏≥‡πÄ‡∏†‡∏≠']} {row['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']}", axis=1)
    distinct_locations = df_pat['loc_name'].dropna().unique().tolist()
    df_geo = geocode_address(distinct_locations)
    df_pat = df_pat.merge(df_geo, left_on='loc_name', right_on='name', how='left')
else:
    df_pat['lat'], df_pat['lon'] = None, None

# ----------------------------
# üéõ Sidebar filtering
# ----------------------------
st.sidebar.header("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")

months = sorted(df_pat['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'].dropna().unique().tolist())
gp_list = sorted(df_pat['4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á'].dropna().unique().tolist()) if '4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á' in df_pat.columns else []

month_sel = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + months)
gp_sel = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ", ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + gp_list)

dff = df_pat.copy()
if month_sel != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
    dff = dff[dff['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] == month_sel]
if gp_sel != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
    dff = dff[dff['4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á'] == gp_sel]

# ----------------------------
# üìà ‡∏Å‡∏£‡∏≤‡∏ü: ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ 4 ‡∏Å‡∏•‡∏∏‡πà‡∏° vs PM2.5
# ----------------------------
st.subheader("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ vs ‡∏Ñ‡πà‡∏≤ PM2.5")

if '4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á' in df_pat.columns:
    agg = df_pat.groupby(['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á']).size().reset_index(name='count')
    df_merge = agg.merge(df_pm, on='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', how='left')

    fig_comb = make_subplots(specs=[[{"secondary_y": True}]])
    for grp in df_merge['4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á'].unique():
        d2 = df_merge[df_merge['4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á'] == grp]
        fig_comb.add_trace(
            go.Scatter(x=d2['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], y=d2['count'], name=f"‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ {grp}", mode='lines+markers'),
            secondary_y=False
        )

    if 'PM2.5 (ug/m3)' in df_merge.columns:
        fig_comb.add_trace(
            go.Scatter(x=df_merge['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], y=df_merge['PM2.5 (ug/m3)'], name="PM2.5 (ug/m3)", line=dict(color='black', dash='dash')),
            secondary_y=True
        )

    fig_comb.update_layout(title_text="‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ vs PM2.5")
    fig_comb.update_yaxes(title_text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", secondary_y=False)
    fig_comb.update_yaxes(title_text="PM2.5 (ug/m3)", secondary_y=True)
    st.plotly_chart(fig_comb, use_container_width=True)
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ----------------------------
# üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡∏ö‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
# ----------------------------
st.subheader("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡∏ö‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
map_df = dff[['lat', 'lon', 'loc_name']].dropna() if 'lat' in dff.columns else pd.DataFrame()
if not map_df.empty:
    st.map(map_df.rename(columns={'lat': 'latitude', 'lon': 'longitude'}))
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≥‡∏ö‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ geocode ‡πÑ‡∏î‡πâ")

# ----------------------------
# üë• ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á
# ----------------------------
st.subheader("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á")
if '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á' in df_pat.columns:
    sp = df_pat['‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á'].value_counts().reset_index()
    sp.columns = ['‡∏Å‡∏•‡∏∏‡πà‡∏°', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
    pie = px.pie(sp, values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', names='‡∏Å‡∏•‡∏∏‡πà‡∏°', title='‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á')
    st.plotly_chart(pie, use_container_width=True)
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ----------------------------
# üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------
st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)")
st.dataframe(dff, use_container_width=True)
