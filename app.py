import streamlit as st
import pandas as pd
import plotly.express as px
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter

# ----------------------------
# üîß CONFIG: Google Sheets URL (export to CSV)
# ----------------------------
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sheet ‚Äú‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‚Äù (tab ‡∏´‡∏•‡∏±‡∏Å)
URL_PATIENT = (
    "https://docs.google.com/spreadsheets/d/1vvQ8YLChHXvCowQQzcKIeV4PWt0CCt76f5Sj3fNTOV0"
    "/export?format=csv&gid=0"
)
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sheet ‚ÄúPM2.5 ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‚Äù (‡∏Å‡∏£‡∏ì‡∏µ tab ‡πÅ‡∏¢‡∏Å)
URL_PM25 = (
    "https://docs.google.com/spreadsheets/d/1vvQ8YLChHXvCowQQzcKIeV4PWt0CCt76f5Sj3fNTOV0"
    "/export?format=csv&gid=<gid_of_pm25_sheet>"
)

# ----------------------------
# üîÅ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------
@st.cache_data
def load_patient():
    df = pd.read_csv(URL_PATIENT)
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    df.columns = df.columns.str.strip()
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‚Üí ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (yyyy-MM)
    if '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' in df.columns:
        df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'], errors='coerce')
        df['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].dt.to_period('M').astype(str)
    return df

@st.cache_data
def load_pm25():
    df = pd.read_csv(URL_PM25)
    df.columns = df.columns.str.strip()
    # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" ‡πÅ‡∏•‡∏∞ "PM2.5‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"
    return df

df_pat = load_patient()
df_pm = load_pm25()

# ----------------------------
# ‚úèÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢: geocode ‡∏ä‡∏∑‡πà‡∏≠ ‚Üí lat, lon
# ----------------------------
@st.cache_data
def geocode_address(list_of_names):
    geolocator = Nominatim(user_agent="pm25_dashboard")
    geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)
    records = []
    for name in list_of_names:
        try:
            loc = geocode(name)
            if loc:
                records.append({'name': name, 'lat': loc.latitude, 'lon': loc.longitude})
            else:
                records.append({'name': name, 'lat': None, 'lon': None})
        except Exception as e:
            records.append({'name': name, 'lat': None, 'lon': None})
    return pd.DataFrame(records)

# ----------------------------
# üß≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≥‡∏ö‡∏•
# ----------------------------
# ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏£‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠ ‚Äú‡∏ï‡∏≥‡∏ö‡∏•, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‚Äù ‡πÄ‡∏õ‡πá‡∏ô string
df_pat['loc_name'] = df_pat.apply(
    lambda row: f\"{row['‡∏ï‡∏≥‡∏ö‡∏•']} {row['‡∏≠‡∏≥‡πÄ‡∏†‡∏≠']} {row['‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î']}\", axis=1
)
distinct_locations = df_pat['loc_name'].unique().tolist()
df_geo = geocode_address(distinct_locations)
# ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö df_pat
df_pat = df_pat.merge(df_geo, left_on='loc_name', right_on='name', how='left')

# ----------------------------
# üéõ Sidebar filtering
# ----------------------------
st.sidebar.header("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á filter: ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ
months = sorted(df_pat['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'].dropna().unique().tolist())
gp_list = sorted(df_pat['4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á'].dropna().unique().tolist())
month_sel = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + months)
gp_sel = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ", ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + gp_list)

dff = df_pat.copy()
if month_sel != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
    dff = dff[dff['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] == month_sel]
if gp_sel != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
    dff = dff[dff['4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á'] == gp_sel]

# ----------------------------
# üìà ‡∏Å‡∏£‡∏≤‡∏ü: ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ 4 ‡∏Å‡∏•‡∏∏‡πà‡∏° vs PM2.5
# ----------------------------
st.subheader("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ vs ‡∏Ñ‡πà‡∏≤ PM2.5")
# ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
agg = df_pat.groupby(['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á']).size().reset_index(name='count')
# ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5
df_merge = agg.merge(df_pm, on='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', how='left')

fig = px.line(
    df_merge,
    x='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
    y='count',
    color='4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á',
    markers=True,
    title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ',
)
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô PM2.5 ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Å‡∏ô y ‡∏£‡∏≠‡∏á
fig2 = px.line(
    df_merge,
    x='‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
    y='PM2.5‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
    markers=True,
    title='PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
)
# ‡∏ú‡∏™‡∏°‡∏™‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ secondary_y
from plotly.subplots import make_subplots
import plotly.graph_objs as go

fig_comb = make_subplots(specs=[[{"secondary_y": True}]])
for grp in df_merge['4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á'].unique():
    d2 = df_merge[df_merge['4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á'] == grp]
    fig_comb.add_trace(
        go.Scatter(x=d2['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], y=d2['count'], name=f"‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ {grp}"),
        secondary_y=False
    )
# PM2.5 trace
fig_comb.add_trace(
    go.Scatter(x=df_merge['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'], y=df_merge['PM2.5‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'], name="PM2.5‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", line=dict(color='black', dash='dash')),
    secondary_y=True
)
fig_comb.update_layout(title_text="‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ vs PM2.5")
fig_comb.update_yaxes(title_text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢", secondary_y=False)
fig_comb.update_yaxes(title_text="PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", secondary_y=True)
st.plotly_chart(fig_comb, use_container_width=True)

# ----------------------------
# üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: ‡∏à‡∏∏‡∏î‡∏ï‡∏≥‡∏ö‡∏• / ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
# ----------------------------
st.subheader("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡∏ö‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
map_df = dff[['lat', 'lon', 'loc_name']].dropna()
if not map_df.empty:
    st.map(map_df.rename(columns={'lat':'latitude', 'lon':'longitude'}))
else:
    st.write("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡∏≥‡∏ö‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà")

# ----------------------------
# üë• ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô ‚Äú‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‚Äù
# ----------------------------
st.subheader("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á")
# ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ: ‡πÄ‡∏û‡∏®, ‡∏≠‡∏≤‡∏¢‡∏∏, ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß ‡∏Ø‡∏•‡∏Ø
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ñ‡πâ‡∏≤ df_pat ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á'
if '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á' in df_pat.columns:
    sp = df_pat['‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á'].value_counts().reset_index()
    sp.columns = ['‡∏Å‡∏•‡∏∏‡πà‡∏°', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
    pie = px.pie(sp, values='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', names='‡∏Å‡∏•‡∏∏‡πà‡∏°', title='‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á')
    st.plotly_chart(pie, use_container_width=True)

# ----------------------------
# üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á
# ----------------------------
st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)")
st.dataframe(dff, use_container_width=True)
