import streamlit as st
import pandas as pd
import plotly.express as px
import gspread
from gspread_pandas import GSpread, Client
from google.oauth2.service_account import Credentials
import traceback

# --- CONFIGURATION & AUTHENTICATION ---
st.set_page_config(layout="wide")

def connect_to_gsheet():
    """Establishes a connection to the Google Sheet."""
    try:
        creds_dict = st.secrets["gcp_service_account"]
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        client = Client(creds)
        return client
    except Exception as e:
        st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google API: {e}")
        st.stop()

def load_data(client, url):
    """Loads data from the Google Sheet."""
    try:
        gsheet = GSpread(client=client, gsheet_id_or_url=url)
        # Assuming the data is on the first sheet
        df = gsheet.sheet_to_df(index=False)
        return df
    except Exception as e:
        st.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡πÑ‡∏î‡πâ: {e}")
        st.info("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏ä‡∏£‡πå Sheet ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á Service Account ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞ URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        st.code(f"Traceback:\n{traceback.format_exc()}")
        st.stop()


# --- DATA PROCESSING ---
def preprocess_data(df, date_column):
    """Prepares the data for plotting."""
    if date_column not in df.columns:
        st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ '{date_column}' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        st.info(f"‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: {', '.join(df.columns)}")
        st.stop()

    df[date_column] = pd.to_datetime(df[date_column], errors='coerce')
    df = df.dropna(subset=[date_column])
    daily_counts = df.set_index(date_column).resample('D').size().reset_index(name='count')
    return daily_counts

# --- MAIN APP LOGIC ---
st.title("üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")

# Get configuration from secrets
try:
    g_sheet_url = st.secrets["google_sheet"]["url"]
    date_column_name = 'date' # <--- ‚ùóÔ∏è‚ùóÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
except KeyError:
    st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ 'google_sheet' ‡∏´‡∏£‡∏∑‡∏≠ 'url' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Secrets")
    st.stop()


# Connect and load data
gsheet_client = connect_to_gsheet()
raw_df = load_data(gsheet_client, g_sheet_url)


if not raw_df.empty:
    st.success("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    
    # Process and display data
    daily_patient_counts = preprocess_data(raw_df, date_column_name)

    st.header("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ (‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)")
    fig = px.line(
        daily_patient_counts,
        x=date_column_name,
        y='count',
        title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô',
        labels={'date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'count': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢'}
    )
    fig.update_layout(
        xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏Ñ‡∏ô)",
        title_x=0.5,
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
    )
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö")
    st.dataframe(raw_df)
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheet")

