import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta

# --- Page Configuration ---
st.set_page_config(
    page_title="Dashboard ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å PM2.5",
    page_icon="üò∑",
    layout="wide",
)

# --- Data Loading and Caching ---

# Function to load real-time PM2.5 data from Google Sheet
# We use a special URL format to directly download the sheet as a CSV.
@st.cache_data(ttl=600) # Cache data for 10 minutes
def load_pm25_realtime():
    try:
        sheet_id = "1-Une9oA0-ln6ApbhwaXFNpkniAvX7g1K9pNR800MJwQ"
        sheet_gid = "0"
        url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid={sheet_gid}"
        df = pd.read_csv(url)
        # Assuming the structure is [Timestamp, PM2.5 Value]
        latest_data = df.iloc[-1]
        timestamp = pd.to_datetime(latest_data.iloc[0])
        pm25_value = latest_data.iloc[1]
        return timestamp, pm25_value
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5: {e}")
        return None, None

# Function to generate mock historical data for demonstration
@st.cache_data
def generate_mock_data():
    """Generates a DataFrame with mock patient and PM2.5 data for the last 3 years."""
    end_date = datetime.now()
    start_date = end_date - timedelta(days=3*365)
    dates = pd.to_datetime(pd.date_range(start=start_date, end=end_date, freq='D'))
    
    # Simulate seasonal PM2.5 peaks (higher in winter/spring)
    month_factors = [1.5, 2.0, 2.5, 1.8, 1.0, 0.8, 0.7, 0.8, 1.0, 1.2, 1.3, 1.4] # Jan-Dec
    seasonal_pm25 = [month_factors[d.month-1] for d in dates]
    base_pm25 = np.random.rand(len(dates)) * 30 + 15
    pm25_values = base_pm25 * seasonal_pm25 + np.random.randn(len(dates)) * 5
    pm25_values = np.clip(pm25_values, 5, 150)

    # Simulate patient counts, correlated with PM2.5
    # Group 1: Respiratory (highly correlated)
    group1 = np.random.randint(5, 20, len(dates)) + (pm25_values / 5).astype(int)
    # Group 2: Cardiovascular (moderately correlated)
    group2 = np.random.randint(3, 15, len(dates)) + (pm25_values / 8).astype(int)
    # Group 3: Eye Irritation (moderately correlated)
    group3 = np.random.randint(2, 10, len(dates)) + (pm25_values / 10).astype(int)
    # Group 4: Others (less correlated)
    group4 = np.random.randint(10, 30, len(dates))

    df = pd.DataFrame({
        'Date': dates,
        'PM2.5': pm25_values,
        '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à': group1,
        '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î': group2,
        '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏≤‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö': group3,
        '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∑‡πà‡∏ô‡πÜ': group4
    })
    return df

# --- UI Layout ---

# Title
st.title("üò∑ Dashboard ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å PM2.5")
st.subheader("‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤)")

# --- Real-time PM2.5 Display ---
timestamp, pm25_value = load_pm25_realtime()

def get_aqi_color(pm_value):
    if pm_value <= 25: return "green"
    if pm_value <= 37: return "yellow"
    if pm_value <= 50: return "orange"
    if pm_value <= 90: return "red"
    return "purple"

if timestamp and pm25_value is not None:
    col1, col2 = st.columns([1, 4])
    with col1:
        color = get_aqi_color(pm25_value)
        st.markdown(f"""
        <div style="background-color:{color}; padding: 20px; border-radius: 10px; text-align: center;">
            <h3 style="color:white; margin:0;">PM2.5 ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</h3>
            <h1 style="color:white; margin:0; font-size: 3em;">{pm25_value:.1f}</h1>
            <p style="color:white; margin:0;">Œºg/m¬≥</p>
        </div>
        """, unsafe_allow_html=True)
    with col2:
        st.info(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠: {timestamp.strftime('%d %B %Y, %H:%M:%S')}")
        st.markdown("""
        **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**
        - **0-25 (‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß):** ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏°‡∏≤‡∏Å
        - **26-37 (‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á):** ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
        - **38-50 (‡∏™‡∏µ‡∏™‡πâ‡∏°):** ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á
        - **51-90 (‡∏™‡∏µ‡πÅ‡∏î‡∏á):** ‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á
        - **91+ (‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á):** ‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á ‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á
        """)
else:
    st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5 Real-time ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")

st.markdown("---")

# --- Historical Data Visualization ---
st.header("üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)")

# Load mock data
df_historical = generate_mock_data()

# --- Sidebar for Filters ---
with st.sidebar:
    st.header("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # Date Range Filter
    min_date = df_historical['Date'].min().date()
    max_date = df_historical['Date'].max().date()
    
    selected_date_range = st.date_input(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date,
        format="DD/MM/YYYY"
    )

    # Disease Group Filter
    disease_groups = ['‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à', '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î', '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏ï‡∏≤‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö', '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏≠‡∏∑‡πà‡∏ô‡πÜ']
    selected_groups = st.multiselect(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à",
        options=disease_groups,
        default=disease_groups
    )

# Filter data based on sidebar selection
if len(selected_date_range) == 2:
    start_date_filter, end_date_filter = selected_date_range
    mask = (df_historical['Date'].dt.date >= start_date_filter) & (df_historical['Date'].dt.date <= end_date_filter)
    filtered_df = df_historical.loc[mask]
else:
    filtered_df = df_historical.copy()

if not selected_groups:
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")
    st.stop()

# Aggregate data by month for plotting
filtered_df['Month'] = filtered_df['Date'].dt.to_period('M').astype(str)
monthly_agg = filtered_df.groupby('Month').agg({
    'PM2.5': 'mean',
    **{group: 'sum' for group in selected_groups}
}).reset_index()

# Add a 'Total Patients' column for the bar chart
monthly_agg['Total Patients'] = monthly_agg[selected_groups].sum(axis=1)

# --- Create Dual-Axis Chart ---
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add Bar Chart for Total Patients
fig.add_trace(
    go.Bar(
        x=monthly_agg['Month'], 
        y=monthly_agg['Total Patients'], 
        name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏ß‡∏°",
        marker_color='cornflowerblue'
    ),
    secondary_y=False,
)

# Add Line Chart for PM2.5
fig.add_trace(
    go.Scatter(
        x=monthly_agg['Month'], 
        y=monthly_agg['PM2.5'], 
        name="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5",
        mode='lines+markers',
        line=dict(color='firebrick', width=3)
    ),
    secondary_y=True,
)

# Update layout and axis titles
fig.update_layout(
    title_text="‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏ß‡∏°‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-‡∏õ‡∏µ",
    legend=dict(x=0, y=1.1, traceorder="normal", orientation="h")
)

fig.update_yaxes(title_text="<b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏Ñ‡∏ô)</b>", secondary_y=False)
fig.update_yaxes(title_text="<b>‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (Œºg/m¬≥)</b>", secondary_y=True)

st.plotly_chart(fig, use_container_width=True)

# --- Display Raw Data (Optional) ---
with st.expander("‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"):
    st.dataframe(monthly_agg)
