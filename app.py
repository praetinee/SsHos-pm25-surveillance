import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

# --- Page Configuration ---
st.set_page_config(
    page_title="PM2.5 Patient Dashboard",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Data Generation (Mock Data) ---
# In a real-world scenario, you would connect to a database here.
@st.cache_data
def generate_mock_data():
    """Generates a DataFrame with mock patient data."""
    start_date = datetime(2024, 1, 1)
    end_date = datetime.now()
    date_range = pd.date_range(start_date, end_date)
    
    diseases = ["‡πÇ‡∏£‡∏Ñ‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î (Asthma)", "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≠‡∏î‡∏≠‡∏∏‡∏î‡∏Å‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á (COPD)", "‡πÇ‡∏£‡∏Ñ‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ (Allergic Rhinitis)", "‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Cardiovascular)", "‡πÇ‡∏£‡∏Ñ‡∏ï‡∏≤‡πÅ‡∏î‡∏á (Conjunctivitis)"]
    age_groups = ["0-10 ‡∏õ‡∏µ", "11-20 ‡∏õ‡∏µ", "21-40 ‡∏õ‡∏µ", "41-60 ‡∏õ‡∏µ", "60+ ‡∏õ‡∏µ"]
    
    data = []
    for date in date_range:
        # Simulate more patients during high PM2.5 seasons (e.g., Jan-Apr)
        if date.month in [1, 2, 3, 4, 12]:
            daily_patients = np.random.randint(25, 60)
        else:
            daily_patients = np.random.randint(5, 20)
            
        for _ in range(daily_patients):
            data.append({
                "date": date,
                "disease": np.random.choice(diseases, p=[0.3, 0.2, 0.3, 0.15, 0.05]),
                "age_group": np.random.choice(age_groups, p=[0.15, 0.15, 0.3, 0.25, 0.15]),
            })
            
    df = pd.DataFrame(data)
    df['date'] = pd.to_datetime(df['date']).dt.date
    return df

df = generate_mock_data()

# --- Sidebar Filters ---
st.sidebar.header("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Filters) üî¨")

# Date Range Filter
min_date = df['date'].min()
max_date = df['date'].max()
start_date, end_date = st.sidebar.date_input(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:",
    value=(max_date - timedelta(days=30), max_date),
    min_value=min_date,
    max_value=max_date,
    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
)

# Disease Filter
all_diseases = df['disease'].unique()
selected_diseases = st.sidebar.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ:",
    options=all_diseases,
    default=all_diseases,
    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"
)

# Age Group Filter
all_age_groups = df['age_group'].unique()
selected_age_groups = st.sidebar.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏¢‡∏∏:",
    options=all_age_groups,
    default=all_age_groups,
    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"
)


# --- Filtering Data based on selections ---
df_filtered = df[
    (df['date'] >= start_date) &
    (df['date'] <= end_date) &
    (df['disease'].isin(selected_diseases)) &
    (df['age_group'].isin(selected_age_groups))
]

# --- Main Dashboard ---
st.title("ü©∫ Dashboard ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö PM2.5")
st.markdown("‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")

# --- Key Metrics (KPIs) ---
st.markdown("---")
st.subheader("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (Key Metrics)")

# Prepare data for metrics
today = max_date
yesterday = today - timedelta(days=1)

patients_today = len(df[df['date'] == today])
patients_yesterday = len(df[df['date'] == yesterday])
delta_today = patients_today - patients_yesterday if patients_yesterday > 0 else 0

total_patients_selected_range = len(df_filtered)
avg_patients_per_day = total_patients_selected_range / ((end_date - start_date).days + 1) if (end_date - start_date).days > 0 else 0

# Display Metrics
kpi1, kpi2, kpi3 = st.columns(3)
kpi1.metric(
    label=f"‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ({today.strftime('%d %b')})",
    value=f"{patients_today} ‡∏Ñ‡∏ô",
    delta=f"{delta_today} vs ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
    help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"
)

kpi2.metric(
    label="‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ç‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
    value=f"{total_patients_selected_range} ‡∏Ñ‡∏ô",
    help=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {start_date.strftime('%d %b')} ‡∏ñ‡∏∂‡∏á {end_date.strftime('%d %b')}"
)

kpi3.metric(
    label="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô",
    value=f"{avg_patients_per_day:.1f} ‡∏Ñ‡∏ô/‡∏ß‡∏±‡∏ô",
    help="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
)
st.markdown("---")


# --- Charts ---
st.subheader("‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Visualizations)")

# Daily Patient Trend Chart
daily_counts = df_filtered.groupby('date').size().reset_index(name='count')
daily_counts['moving_avg_7_days'] = daily_counts['count'].rolling(window=7, min_periods=1).mean()

fig_trend = go.Figure()

# Bar chart for daily count
fig_trend.add_trace(go.Bar(
    x=daily_counts['date'],
    y=daily_counts['count'],
    name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô',
    marker_color='#1f77b4',
    opacity=0.6
))

# Line chart for moving average
fig_trend.add_trace(go.Scatter(
    x=daily_counts['date'],
    y=daily_counts['moving_avg_7_days'],
    name='‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7 ‡∏ß‡∏±‡∏ô',
    mode='lines',
    line=dict(color='#ff7f0e', width=3)
))

fig_trend.update_layout(
    title='‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô',
    xaxis_title='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
    yaxis_title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏Ñ‡∏ô)',
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
    plot_bgcolor='rgba(0,0,0,0)',
    paper_bgcolor='rgba(0,0,0,0)'
)
st.plotly_chart(fig_trend, use_container_width=True)


# Breakdown Charts (Disease and Age Group)
col1, col2 = st.columns(2)

with col1:
    # Disease Breakdown
    disease_counts = df_filtered['disease'].value_counts().reset_index()
    disease_counts.columns = ['disease', 'count']
    fig_disease = px.bar(
        disease_counts,
        x='count',
        y='disease',
        orientation='h',
        title='‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ',
        labels={'count': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢', 'disease': '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ'},
        text='count',
        color='disease',
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    fig_disease.update_layout(showlegend=False, yaxis={'categoryorder':'total ascending'})
    st.plotly_chart(fig_disease, use_container_width=True)

with col2:
    # Age Group Breakdown
    age_counts = df_filtered['age_group'].value_counts().reset_index()
    age_counts.columns = ['age_group', 'count']
    fig_age = px.pie(
        age_counts,
        names='age_group',
        values='count',
        title='‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏¢‡∏∏',
        hole=0.4,
        color_discrete_sequence=px.colors.qualitative.Set3
    )
    fig_age.update_traces(textposition='inside', textinfo='percent+label')
    st.plotly_chart(fig_age, use_container_width=True)


# --- Raw Data Table ---
with st.expander("‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (Raw Data)  Raw Data) üìÑ"):
    st.dataframe(df_filtered.style.format({"date": lambda x: x.strftime("%Y-%m-%d")}))

# --- Footer ---
st.markdown("---")
st.markdown("Developed for Hospital Staff | Data is for demonstration purposes only.")
