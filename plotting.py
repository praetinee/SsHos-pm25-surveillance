import plotly.express as px
import plotly.graph_objs as go
from plotly.subplots import make_subplots
import pandas as pd
import streamlit as st

def plot_patient_vs_pm25(df_pat, df_pm):
    """
    Generates and displays line charts for patient counts vs a background-highlighted
    area chart for PM2.5 levels, with multiple thresholds.
    """
    st.subheader("üìä ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ 4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5")

    # --- Data validation ---
    if "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" not in df_pat.columns or "4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á" not in df_pat.columns:
        st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á'")
        return

    # --- Prepare patient data ---
    agg = df_pat.groupby(["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"]).size().reset_index(name="count")
    patient_pivot = agg.pivot(index="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", columns="4 ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á", values="count").fillna(0)
    patient_pivot = patient_pivot.sort_index()

    fig = make_subplots(specs=[[{"secondary_y": True}]])

    # --- Prepare combined data for x-axis and PM2.5 ---
    all_months_list = sorted(list(set(list(patient_pivot.index) + list(df_pm['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'].unique()))))
    all_months_df = pd.DataFrame({'‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': all_months_list})
    df_merged_pm = pd.merge(all_months_df, df_pm, on="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", how="left").sort_values('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')
    
    # --- Define Thresholds and Plotting Range ---
    PM25_MODERATE = 37.5
    PM25_UNHEALTHY = 75.0
    max_pm_val = df_merged_pm["PM2.5 (ug/m3)"].max()
    plot_max_y = max(PM25_UNHEALTHY, max_pm_val if pd.notna(max_pm_val) else 0) * 1.15

    # --- Add Threshold Highlighting Zones (as background) ---
    # Zone 1: Moderate/Cautious (Yellow)
    fig.add_shape(
        type="rect", xref="paper", yref="y2",
        x0=0, y0=PM25_MODERATE, x1=1, y1=PM25_UNHEALTHY,
        fillcolor="rgba(255, 217, 102, 0.2)", line_width=0, layer="below"
    )
    # Zone 2: Unhealthy (Red)
    fig.add_shape(
        type="rect", xref="paper", yref="y2",
        x0=0, y0=PM25_UNHEALTHY, x1=1, y1=plot_max_y,
        fillcolor="rgba(255, 82, 82, 0.2)", line_width=0, layer="below"
    )

    # --- Plot PM2.5 as an Area Chart ---
    if not df_merged_pm.empty and "PM2.5 (ug/m3)" in df_merged_pm.columns:
        fig.add_trace(
            go.Scatter(
                x=df_merged_pm["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"],
                y=df_merged_pm["PM2.5 (ug/m3)"],
                name="PM2.5 (ug/m3)",
                fill='tozeroy',
                mode='lines',
                line=dict(color="rgba(0, 0, 0, 0.5)", width=1.5)
            ),
            secondary_y=True
        )

        # --- Add Threshold Lines with Labels ---
        fig.add_hline(
            y=PM25_MODERATE, line_dash="dot",
            line_color="orange",
            annotation_text=f"‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á ({PM25_MODERATE})",
            annotation_position="bottom right",
            secondary_y=True
        )
        fig.add_hline(
            y=PM25_UNHEALTHY, line_dash="dot",
            line_color="red",
            annotation_text=f"‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ ({PM25_UNHEALTHY})",
            annotation_position="top right",
            secondary_y=True
        )
    
    # --- Plot line charts for patient groups ---
    colors = px.colors.qualitative.Plotly
    for i, group in enumerate(patient_pivot.columns):
        fig.add_trace(
            go.Scatter(
                x=patient_pivot.index,
                y=patient_pivot[group],
                name=group,
                mode='lines+markers',
                line=dict(width=2, color=colors[i % len(colors)]),
            ),
            secondary_y=False
        )

    # --- Finalize Layout ---
    fig.update_layout(
        title_text="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5",
        legend_title_text="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        hovermode="x unified"
    )
    fig.update_yaxes(title_text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏Ñ‡∏ô)", secondary_y=False)
    fig.update_yaxes(title_text="PM2.5 (ug/m3)", secondary_y=True, range=[0, plot_max_y])
    st.plotly_chart(fig, use_container_width=True)


def plot_vulnerable_pie(df, month_filter):
    """Generates and displays a pie chart of vulnerable groups."""
    st.subheader("üë• ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á")

    if "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á" in df.columns:
        if df["‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á"].dropna().empty:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            return
            
        sp = df["‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á"].value_counts().reset_index()
        sp.columns = ["‡∏Å‡∏•‡∏∏‡πà‡∏°", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
        title = f"‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {month_filter})"
        fig = px.pie(sp, values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", names="‡∏Å‡∏•‡∏∏‡πà‡∏°", title=title)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

